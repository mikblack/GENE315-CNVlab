heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=F)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y[,ord],trace='row',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG
ord
rownames(y)<-paste("Gene",1:20,sep='')
colnames(y)<-paste("Sample",1:50,sep='')
heatmap.2(y,trace='none',scale='none',col='bluered')
## Generate metagene via SVD
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simulation method
cor(unscaledMG,scaledMG,method="spearman")
## Add metagene to top of heatmap, and order samples by metagene value
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG,decreasing=T)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
heatmap.2(y,trace='none',scale='row',col='bluered')
set.seed(123)
y<-matrix(unlist(lapply(seq(1,20)/5,function(x) rnorm(50,x,1))),20,50)
rownames(y)<-paste("Gene",1:20,sep='')
colnames(y)<-paste("Sample",1:50,sep='')
## Load the gplots library (better heatmap function)
library(gplots)
## Generate a heatmap of the data, and scale rows to mean 0, sd 1
heatmap.2(y,trace='none',scale='row',col='bluered')
## Generate metagene via SVD
unscaledMG<-svd(y)$v[,1]
z<-t(apply(y,1,scale))
scaledMG<-svd(z)$v[,1]
## In this case the metagenes are virtually identical, because of my simplistic
## simulation method
cor(unscaledMG,scaledMG,method="spearman")
## Add metagene to top of heatmap, and order samples by metagene value
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='none',col='bluered',Colv=F,ColSideColors=mgCol[ord])
## In this case the "high" metagene value relates to low expression levels of the
## genes - since the sign of the first eigenvector is arbitrary, just flip the
## sign of the metagene
scaledMG <- -scaledMG
mgCol<-bluered(length(scaledMG))[rank(scaledMG)]
ord<-order(scaledMG)
heatmap.2(y[,ord],trace='none',scale='row',col='bluered',Colv=F,ColSideColors=mgCol[ord])
q()
n
library(limma)
vignette(limma)
vignette('limma')
q()
q()
??hazard ratio
??hazard
n <- 500
set.seed(1)
age <- 50 + 12*rnorm(n)
cens <- 15*runif(n)
h <- .02*exp(.04*(age-50))
d.time <- -log(runif(n))/h
label(d.time) <- 'Follow-up Time'
e <- ifelse(d.time <= cens,1,0)
d.time <- pmin(d.time, cens)
units(d.time) <- "Year"
hazard.ratio.plot(age, Surv(d.time,e), e=20, legendloc='ll')
library(rms)
n <- 500
set.seed(1)
age <- 50 + 12*rnorm(n)
cens <- 15*runif(n)
h <- .02*exp(.04*(age-50))
d.time <- -log(runif(n))/h
label(d.time) <- 'Follow-up Time'
e <- ifelse(d.time <= cens,1,0)
d.time <- pmin(d.time, cens)
units(d.time) <- "Year"
hazard.ratio.plot(age, Surv(d.time,e), e=20, legendloc='ll')
setwd('/Users/black/GitHub/resbaz_lessons/R_Shiny_Web_Apps')
q()
q()
q()
q()
3+5
a = 5
3+5
3 + 5
3 + 5 + 6
3 + 5
3 + 5 + 6
a = 5
a <- 5
sqrt(a)
sqrt(5)
a
x<-rnorm(1000)
hist(x)
View(x)
q()
a()
q()
q()
par(ask=T)
hist(rnorm(100))
hist(rnorm(100))
q()
q()
setwd('/Users/black/Research/LoganWalker/AffyBRCAdata/HGU133PLUS2')
setwd('/Volumes/External2TB/Macbook/Users/black/Research/CrisPrint/RMAdata/')
dat<-read.csv('../COMBINED_standardized clinical data_with prop info_updated JAN06_2009-CRISPRINT-subset.csv')
cohort<-dat$Cohort..
accn<-unlist(lapply(strsplit(as.vector(dat$Database.Acc..and.Sample.ID),"|",fixed=T),function(x) x[2]))
accn[is.na(accn)]<-as.vector(dat$Database.Acc..and.Sample.ID)[is.na(accn)]
afile<-unlist(lapply(strsplit(as.vector(dat$Database.Acc..and.Sample.ID),"|",fixed=T),function(x) x[3]))
afile[is.na(afile) & cohort==14]<-paste(gsub(".","_",as.vector(dat$MMADB.ID[is.na(afile) & cohort==14]),fixed=T),"_A",sep='')
table(cohort,accn)
coh<-as.numeric(names(table(cohort)))
files<-list()
for(i in 1:length(coh)){
aa<-accn[cohort==coh[i]]
ff<-afile[cohort==coh[i]]
files[[i]]<-paste("../DataSets/",aa,"/CEL/",ff,".CEL",sep='')
if(coh[i]==8) files[[i]]<-paste("../DataSets/",aa,"/CEL/",ff,".cel",sep='')
if(coh[i]==14) files[[i]][grep("NUH",afile[cohort==14])]<-paste("/Users/black/Research/Lance/PrivateData/NUH_CEL_files/",ff[grep("NUH",afile[cohort==14])],'.CEL',sep='')
}
files
coh<-as.numeric(names(table(cohort)))
files<-list()
for(i in 1:length(coh)){
aa<-accn[cohort==coh[i]]
ff<-afile[cohort==coh[i]]
files[[i]]<-paste("../DataSets/",aa,"/CEL/",ff,".CEL",sep='')
if(coh[i]==8) files[[i]]<-paste("../DataSets/",aa,"/CEL/",ff,".cel",sep='')
if(coh[i]==14) files[[i]][grep("NUH",afile[cohort==14])]<-paste("../PrivateData/NUH_CEL_files/",ff[grep("NUH",afile[cohort==14])],'.CEL',sep='')
}
files
library(affy)
excl<-dat[,24]
files.133a.dups<-unlist(files)[cohort!=5]
files.133a.nodups<-unlist(files)[-grep("map",excl)][cohort[-grep("map",excl)]!=5]
files.133plus2.nodups<-unlist(files)[cohort==5]
files.133a.dups
dat.133a.dups<-read.affybatch(files.133a.dups)
files.133plus2.nodups
q()
?genomeGraphs
?GenomeGraphs
library(GenomeGraphs)
?GenomeGraphs
??GenomeGraphs
mart <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
listMarts()
library(BiocInstaller)
biocLite('GenomeGraphs')
biocLite('biomaRt')
library(biomaRt)
detach('package:biomaRt')
detach('package:genomeGraphs')
detach('package:GenomeGraphs')
detach('package:biomaRt')
library(biomaRt)
listMarts()
listMarts(host="www.ensembl.org")
mart <- useMart(host="www.ensembl.org", "ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
gene <- makeGene(id = "ENSG00000171988",type = "ensembl_gene_id", biomart = mart)
library(GenomeGraphs)
gene <- makeGene(id = "ENSG00000171988",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENST00000399262", type="ensembl_transcript_id", biomart = mart)
gdPlot(list(gene, transcript))
#Draw the gene and then all transcripts of that gene
gene <- makeGene(id = "ENSG00000171988",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENSG00000171988", type="ensembl_gene_id", biomart = mart)
gdPlot(list(gene, transcript))
gene <- makeGene(id = "ENSG00000140262",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENST00000560948", type="ensembl_transcript_id", biomart = mart)
gdPlot(list(gene, transcript))
gene <- makeGene(id = "ENSG00000171988",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENST00000399262", type="ensembl_transcript_id", biomart = mart)
gdPlot(list(gene, transcript))
gene <- makeGene(id = "ENSG00000140262",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENST00000560948", type="ensembl_gene_id", biomart = mart)
gdPlot(list(gene, transcript))
gene <- makeGene(id = "ENSG00000140262",type = "ensembl_gene_id", biomart = mart)
transcript <- makeTranscript(id = "ENSG00000140262", type="ensembl_gene_id", biomart = mart)
gdPlot(list(gene, transcript))
transcript
length(transcript)
length(transcript[[1]])
summary(transcript)
transcript
class(getClass(transscript))
class(getClass(transcript))
getClass(class(transcript))
transcript@numOfTranscripts
transcript@transcriptSize
transcript@dp
library(limma)
goana
?goana
goana
goana.default
library(GO.db)
GO()
library(org.Hs.eg.db)
org.Hs.eg.db()
org.Hs.eg()
go
go<-as.list(org.Hs.egGO2EG)
names(go)[1:10]
match("GO:00007017",names(go))
grep("7017",names(go))
go[grep("7017",names(go))]
gt<-as.list(GOTERM)
gt[1]
names(gt)[1:10]
go[grep("7017",names(gt))]
gt[grep("7017",names(gt))]
gt[grep("07017",names(gt))]
go[go=="GO:0007017"]
go$"GO:0007017"
org.Hs.eg)
org.Hs.eg()
sym<-as.list(org.Hs.egSYMBOL)
sym[1:10]
go$"GO:0007017"
match(go$"GO:0007017",names(sym))
sym[match(go$"GO:0007017",names(sym))]
unlist(sym[match(go$"GO:0007017",names(sym))])
length(unlist(sym[match(go$"GO:0007017",names(sym))]))
goana.default
mik<-unlist(sym[match(go$"GO:0007017",names(sym))])
de<-mik
universe = NULL
species = "Hs"
prior.prob = NULL
if (!is.list(de))
de <- list(DE = de)
de
if (!all(vapply(de, is.vector, TRUE)))
stop("components of de should be vectors")
de <- lapply(de, as.character)
nsets <- length(de)
nsets
names(de) <- trimWhiteSpace(names(de))
NAME <- names(de)
i <- NAME == "" | is.na(NAME)
NAME[i] <- paste0("DE", 1:nsets)[i]
names(de) <- makeUnique(NAME)
species <- match.arg(species, c("Hs", "Mm", "Rn", "Dm"))
if (!suppressPackageStartupMessages(require("GO.db", character.only = TRUE)))
stop("GO.db package not available")
DB <- paste("org", species, "eg", "db", sep = ".")
if (!suppressPackageStartupMessages(require(DB, character.only = TRUE)))
stop(DB, "package not available")
GO2ALLEGS <- paste("org", species, "egGO2ALLEGS", sep = ".")
GO2ALLEGS
is.null(universe)
EG.GO <- AnnotationDbi::toTable(get(GO2ALLEGS))
d <- duplicated(EG.GO[, c("gene_id", "go_id", "Ontology")])
EG.GO <- EG.GO[!d, ]
universe <- unique(EG.GO$gene_id)
universe <- as.character(universe)
length(universe)
Total <- length(unique(EG.GO$gene_id))
Total
1L
if (Total < 1L)
stop("No genes found in universe")
if (!is.null(prior.prob)) {
if (length(prior.prob) != length(universe))
stop("length(prior.prob) must equal length(universe)")
}
isDE <- lapply(de, function(x) EG.GO$gene_id %in% x)
isDE
table(isDE)
EG.GO$gene_id[1:10]
de
go$"GO:0007017"
as.vector(go$"GO:0007017")
mik<-as.vector(go$"GO:0007017")
de<-mik
universe = NULL
species = "Hs"
prior.prob = NULL
if (!is.list(de))
de <- list(DE = de)
if (!all(vapply(de, is.vector, TRUE)))
stop("components of de should be vectors")
de <- lapply(de, as.character)
nsets <- length(de)
names(de) <- trimWhiteSpace(names(de))
NAME <- names(de)
i <- NAME == "" | is.na(NAME)
NAME[i] <- paste0("DE", 1:nsets)[i]
names(de) <- makeUnique(NAME)
species <- match.arg(species, c("Hs", "Mm", "Rn", "Dm"))
if (!suppressPackageStartupMessages(require("GO.db", character.only = TRUE)))
stop("GO.db package not available")
DB <- paste("org", species, "eg", "db", sep = ".")
if (!suppressPackageStartupMessages(require(DB, character.only = TRUE)))
stop(DB, "package not available")
GO2ALLEGS <- paste("org", species, "egGO2ALLEGS", sep = ".")
if (is.null(universe)) {
EG.GO <- AnnotationDbi::toTable(get(GO2ALLEGS))
d <- duplicated(EG.GO[, c("gene_id", "go_id", "Ontology")])
EG.GO <- EG.GO[!d, ]
universe <- unique(EG.GO$gene_id)
universe <- as.character(universe)
}
else {
universe <- as.character(universe)
dup <- duplicated(universe)
if (!is.null(prior.prob)) {
if (length(prior.prob) != length(universe))
stop("length(prior.prob) must equal length(universe)")
prior.prob <- prior.prob[!dup]
}
universe <- universe[!dup]
GO2ALLEGS <- get(GO2ALLEGS)
m <- match(AnnotationDbi::Lkeys(GO2ALLEGS), universe,
0L)
universe <- universe[m]
if (!is.null(prior.prob))
prior.prob <- prior.prob[m]
AnnotationDbi::Lkeys(GO2ALLEGS) <- universe
EG.GO <- AnnotationDbi::toTable(GO2ALLEGS)
d <- duplicated(EG.GO[, c("gene_id", "go_id", "Ontology")])
EG.GO <- EG.GO[!d, ]
}
Total <- length(unique(EG.GO$gene_id))
if (Total < 1L)
stop("No genes found in universe")
if (!is.null(prior.prob)) {
if (length(prior.prob) != length(universe))
stop("length(prior.prob) must equal length(universe)")
}
isDE <- lapply(de, function(x) EG.GO$gene_id %in% x)
isDE
sum(isDE)
length(isDE)
sum(isDE[[1]])
EG.GO
de[1]
EG.GO$gene_id[1:10]
EG.GO$gene_id[de[[1]]]
sum(EG.GO$gene_id %in% x)
x<-de[[1]]
sum(EG.GO$gene_id %in% x)
length(EG.GO$gene_id)
EG.GO$gene_id[1]
EG.GO$gene_id[2]
length(unique(EG.GO$gene_id))
isDE <- lapply(de, function(x) EG.GO$gene_id %in% x)
TotalDE <- lapply(isDE, function(x) length(unique(EG.GO$gene_id[x])))
TotalDE
nDE <- length(isDE)
if (length(prior.prob)) {
m <- match(EG.GO$gene_id, universe)
PW2 <- list(prior.prob[m])
X <- do.call(cbind, c(N = 1, isDE, PW = PW2))
}
length(prior.prob)
X <- do.call(cbind, c(N = 1, isDE))
X
group <- paste(EG.GO$go_id, EG.GO$Ontology, sep = ".")
S <- rowsum(X, group = group, reorder = FALSE)
P <- matrix(0, nrow = nrow(S), ncol = nsets)
if (length(prior.prob)) {
if (!requireNamespace("BiasedUrn", quietly = TRUE))
stop("BiasedUrn package required but is not available")
PW.ALL <- sum(prior.prob[universe %in% EG.GO$gene_id])
AVE.PW <- S[, "PW"]/S[, "N"]
W <- AVE.PW * (Total - S[, "N"])/(PW.ALL - S[, "N"] *
AVE.PW)
for (j in 1:nsets) for (i in 1:nrow(S)) P[i, j] <- BiasedUrn::pWNCHypergeo(S[i,
1 + j], S[i, "N"], Total - S[i, "N"], TotalDE[[j]],
W[i], lower.tail = FALSE) + BiasedUrn::dWNCHypergeo(S[i,
1 + j], S[i, "N"], Total - S[i, "N"], TotalDE[[j]],
W[i])
S <- S[, -ncol(S)]
}
length(prior.prob)
for (j in 1:nsets) P[, j] <- phyper(q = S[, 1 + j] -
0.5, m = TotalDE[[j]], n = Total - TotalDE[[j]],
k = S[, "N"], lower.tail = FALSE)
g <- strsplit2(rownames(S), split = "\\.")
g
TERM <- AnnotationDbi::select(GO.db::GO.db, keys = g[, 1],
columns = "TERM")
Results <- data.frame(Term = TERM[[2]], Ont = g[, 2], S,
P, stringsAsFactors = FALSE)
rownames(Results) <- g[, 1]
colnames(Results)[3 + nsets + (1L:nsets)] <- paste0("P.",
names(de))
Results
lenght(results)
length(results)
length(Results)
class(Results)
head(Results)
head(Results[order(Results$P.DE)])
head(Results[order(Results$P.DE),])
dim(X)
class(S)
dim(S)
roup
group
length(group)
dim(X)
head(X)
sum(X$DE)
sum(X[,2])
head(S)
S <- rowsum(X, group = group, reorder = FALSE)
head(S)
hed(group)
head(group)
length(group)
length(isDE)
length(isDE[[1]])
length(EG.GO)
head(EG.GO)
dim(EG.GO)
sum(EG.GO=="GO:0007017")
EG.GO[EG.GO=="GO:0007017",]
dim(EG.GO)
EG.GO=="GO:0007017"
EG.GO[EG.GO=="GO:0007017",]
head(EG.GO)
EG.GO[EG.GO$go_id=="GO:0007017",]
EG.GO[EG.GO$go_id=="GO:0007017",]$gene_id
length(EG.GO[EG.GO$go_id=="GO:0007017",]$gene_id)
length(unique(EG.GO[EG.GO$go_id=="GO:0007017",]$gene_id))
GO2ALLEGS
org.Hs.eg()
dim(EG.GO)
length(unique(EG.GO$gene_id))
hist(table(EG.GO$gene_id))
sum(table(EG.GO$gene_id)>100)
sum(table(EG.GO$gene_id)>1000)
sum(table(EG.GO$gene_id)>500)
sum(table(EG.GO$gene_id)>10)
head(S)
if (length(prior.prob) != length(universe))
)
sum(EG.GO=="GO:0007017")
q()
q()
q()
library(miktools)
?heatmap.mik
q()
library(miktools)
q()
q()
q()
setwd('/Users/black/Teaching/STAT435/2016/Lectures/STAT435_lec11_2016x')
library(slidify)
slidify('index.Rmd')
q()
q()
q()
rm(ls=list())
q()
q()
f <- file("/dev/cu.usbmodem1411", open="r")
f <- file("/dev/cu.usbmodem1411", open="r")
f
nObs <- 50
Temperature <- rep(NA, nObs)
cycle <- 0
while(cycle<10){
time <- ((cycle*nObs):((cycle+1)*(nObs)))[-1]
plot(Temperature ~ time, t="n", ylim=c(18, 24),
main="Data stream from Arduino via USB port")
for(i in 1:nObs){
Temperature[i] <- scan(f, n=1, quiet=TRUE)
points(i + cycle*nObs, Temperature[i], pch=19)
Sys.sleep(0.05)
}
cycle <- cycle + 1
}
scan(f, n=1, quiet=TRUE)
?scan
scan(f, what='character', n=1, quiet=TRUE)
Sys.sleep
scan(f, what='character', n=2, quiet=TRUE)
scan(f, what='character', n=10, quiet=TRUE)
scan(f, what='character', n=100, quiet=TRUE)
dir()
q()
setwd('/Users/black/GitHub/GENE315-CNVlab')
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('GENE315-lecture9.Rmd')
q()
